# Working Enhanced Shrooly - Fixed boot issues
esphome:
  name: enhanced-openshrooly
  friendly_name: Enhanced OpenShrooly
  project:
    name: "enhanced.openshrooly"
    version: "2.2.0"
  on_boot:
    priority: 200
    then:
      - lambda: |-
          id(menu_mode) = 0;
          id(program_running) = false;
          id(running_program_index) = -1;
          id(selected_program_index) = 0;
      - component.update: epd_display

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: recommended

logger:
  level: INFO

api:

ota:
  - platform: esphome

wifi:
  ap:
    ssid: "Enhanced-OpenShrooly-Setup"
    password: "shrooly123"
  reboot_timeout: 15min

captive_portal:

web_server:
  port: 80

# Working I2C bus
i2c:
  sda: GPIO36
  scl: GPIO35
  scan: true
  id: bus_a
  frequency: 100khz

spi:
  clk_pin: GPIO7
  mosi_pin: GPIO6

display:
  - platform: waveshare_epaper
    cs_pin: GPIO8
    dc_pin: GPIO48
    busy_pin: GPIO38
    reset_pin: GPIO21
    model: 2.90inv2-r2
    rotation: 90°
    id: epd_display
    update_interval: never
    lambda: |-
      // Enhanced menu display with sensor data
      if (id(menu_mode) == 0) {
        // Main program selection menu
        it.print(5, 5, id(font_large), "ENHANCED OPENSHROOLY");
        
        // WiFi and sensor status bar
        it.printf(5, 20, id(font_small), "T:%.1f°C H:%.1f%%", id(temperature).state, id(humidity).state);
        if (id(wifi_connected).state) {
          it.print(150, 20, id(font_small), "WiFi");
        } else {
          it.print(150, 20, id(font_small), "NoWiFi");
        }
        
        // Draw separator line
        it.line(0, 30, 200, 30);
        
        // Program menu
        it.print(5, 35, id(font_medium), "SELECT PROGRAM:");
        
        std::vector<std::string> programs = {
          "Golden Teacher Pinning",
          "Golden Teacher Fruiting", 
          "Oyster Mushroom",
          "Reishi Mushroom"
        };
        
        for (int i = 0; i < 4; i++) {
          if (i == id(selected_program_index)) {
            it.printf(5, 50 + (i * 12), id(font_medium), "> %s", programs[i].c_str());
          } else {
            it.printf(15, 50 + (i * 12), id(font_medium), "%s", programs[i].c_str());
          }
        }
        
        // Button legend at bottom
        it.line(0, 105, 200, 105);
        it.print(5, 110, id(font_small), "◀ PREV    SELECT ●    NEXT ▶    MENU ■");
        
      } else if (id(menu_mode) == 1) {
        // Sensor display menu
        it.print(5, 5, id(font_large), "SENSOR STATUS");
        
        // Current readings
        it.printf(5, 25, id(font_medium), "Temperature: %.2f°C", id(temperature).state);
        it.printf(5, 40, id(font_medium), "Humidity: %.2f%%", id(humidity).state);
        
        // WiFi status
        if (id(wifi_connected).state) {
          it.print(5, 55, id(font_medium), "WiFi: Connected");
        } else {
          it.print(5, 55, id(font_medium), "WiFi: Disconnected");
        }
        
        // I2C status
        it.print(5, 70, id(font_medium), "I2C: Active");
        it.print(5, 85, id(font_small), "SHT4x @ 0x44, Buttons @ 0x6F");
        
        // Button legend
        it.line(0, 105, 200, 105);
        it.print(5, 110, id(font_small), "MENU Back to Programs");
        
      } else if (id(menu_mode) == 3 && id(program_running)) {
        // Program running display
        std::vector<std::string> programs = {"GT Pinning", "GT Fruiting", "Oyster", "Reishi"};
        if (id(running_program_index) >= 0 && id(running_program_index) < 4) {
          it.printf(5, 5, id(font_large), "%s", programs[id(running_program_index)].c_str());
        } else {
          it.print(5, 5, id(font_large), "PROGRAM ACTIVE");
        }
        
        it.print(5, 25, id(font_medium), "STATUS: RUNNING");
        
        // Current environment with better formatting
        it.printf(5, 45, id(font_medium), "Temperature: %.1f°C", id(temperature).state);
        it.printf(5, 60, id(font_medium), "Humidity: %.1f%%", id(humidity).state);
        
        // Equipment status
        it.print(5, 80, id(font_small), "LEDs: ON  Humidifier: ON  Fan: ON");
        
        // Button legend
        it.line(0, 105, 200, 105);
        it.print(5, 110, id(font_small), "MENU Stop Program");
        
      } else {
        // Fallback - always show main menu if not in a defined mode
        id(menu_mode) = 0;
        it.print(5, 5, id(font_large), "ENHANCED OPENSHROOLY");
        it.print(5, 30, id(font_medium), "Initializing...");
      }

font:
  - file: fonts/arial.ttf
    id: font_large
    size: 14
  - file: fonts/arial.ttf
    id: font_medium
    size: 11
  - file: fonts/arial.ttf
    id: font_small
    size: 8

sensor:
  - platform: sht4x
    i2c_id: bus_a
    temperature:
      name: "Temperature"
      id: temperature
    humidity:
      name: "Humidity"
      id: humidity
    address: 0x44
    update_interval: 10s

binary_sensor:
  - platform: status
    name: "WiFi Connected"
    id: wifi_connected

  - platform: template
    name: "Left Button"
    id: left_button
    
  - platform: template
    name: "Select Button"
    id: select_button
    
  - platform: template
    name: "Right Button" 
    id: right_button
    
  - platform: template
    name: "Menu Button"
    id: menu_button

globals:
  - id: menu_mode
    type: int
    restore_value: false
    initial_value: '0'
  - id: selected_program_index
    type: int
    restore_value: true
    initial_value: '0'
  - id: running_program_index
    type: int
    restore_value: false
    initial_value: '-1'
  - id: program_running
    type: bool
    restore_value: false
    initial_value: 'false'

# Hardware outputs
output:
  - platform: ledc
    pin: GPIO15
    id: fan_output
    frequency: 25000 Hz
  - platform: gpio
    pin: GPIO16
    id: humidifier_output
  - platform: ledc
    pin: GPIO17
    id: white_led_output
  - platform: ledc
    pin: GPIO18
    id: red_output
  - platform: ledc
    pin: GPIO19
    id: green_output
  - platform: ledc
    pin: GPIO20
    id: blue_output

fan:
  - platform: speed
    name: "Circulation Fan"
    id: circulation_fan
    output: fan_output

switch:
  - platform: output
    name: "Humidifier"
    id: humidifier
    output: humidifier_output

light:
  - platform: monochromatic
    name: "White LEDs"
    id: white_leds
    output: white_led_output
  - platform: rgb
    name: "RGB LEDs" 
    id: rgb_leds
    red: red_output
    green: green_output
    blue: blue_output

script:
  - id: button_left
    then:
      - if:
          condition:
            lambda: return id(menu_mode) == 0;
          then:
            - lambda: id(selected_program_index) = (id(selected_program_index) + 3) % 4;
            - component.update: epd_display

  - id: button_right
    then:
      - if:
          condition:
            lambda: return id(menu_mode) == 0;
          then:
            - lambda: id(selected_program_index) = (id(selected_program_index) + 1) % 4;
            - component.update: epd_display

  - id: button_select
    then:
      - if:
          condition:
            lambda: return id(menu_mode) == 0;
          then:
            - script.execute: start_selected_program
      - if:
          condition:
            lambda: return id(menu_mode) == 3;
          then:
            - script.execute: stop_program

  - id: button_menu
    then:
      - if:
          condition:
            lambda: return id(program_running);
          then:
            - script.execute: stop_program
      - if:
          condition:
            lambda: return id(menu_mode) == 0;
          then:
            - lambda: id(menu_mode) = 1;
            - component.update: epd_display
      - if:
          condition:
            lambda: return id(menu_mode) == 1;
          then:
            - lambda: id(menu_mode) = 0;
            - component.update: epd_display

  - id: start_selected_program
    then:
      - lambda: |-
          id(running_program_index) = id(selected_program_index);
          id(program_running) = true;
          id(menu_mode) = 3;
      - if:
          condition:
            lambda: return id(selected_program_index) == 0;
          then:
            - light.turn_on:
                id: white_leds
                brightness: 70%
            - light.turn_on:
                id: rgb_leds
                brightness: 80%
                red: 0%
                green: 0%
                blue: 100%
            - switch.turn_on: humidifier
            - fan.turn_on:
                id: circulation_fan
                speed: 60
      - if:
          condition:
            lambda: return id(selected_program_index) == 1;
          then:
            - light.turn_on:
                id: white_leds
                brightness: 100%
            - light.turn_on:
                id: rgb_leds
                brightness: 60%
                red: 0%
                green: 0%
                blue: 100%
            - switch.turn_on: humidifier
            - fan.turn_on:
                id: circulation_fan
                speed: 40
      - component.update: epd_display

  - id: stop_program
    then:
      - lambda: |-
          id(program_running) = false;
          id(running_program_index) = -1;
          id(menu_mode) = 0;
      - light.turn_off: white_leds
      - light.turn_off: rgb_leds  
      - switch.turn_off: humidifier
      - fan.turn_off: circulation_fan
      - component.update: epd_display

# Simple, working I2C button monitoring - no complex debouncing yet
interval:
  - interval: 0.5s
    then:
      - lambda: |-
          static uint8_t last_button_value = 0xFF;
          
          // Read from 0x6F I2C button controller
          Wire.beginTransmission(0x6F);
          uint8_t error = Wire.endTransmission();
          
          if (error == 0) {
            Wire.requestFrom(0x6F, 1);
            if (Wire.available()) {
              uint8_t current_value = Wire.read();
              
              // Only process when value changes
              if (current_value != last_button_value) {
                ESP_LOGI("buttons", "Button change: 0x%02X -> 0x%02X", last_button_value, current_value);
                
                // Simple button detection - only on press
                if (last_button_value == 0xFF) { // Only on first press from idle
                  if (current_value == 0x25) {
                    ESP_LOGI("buttons", "LEFT button pressed");
                    id(left_button).publish_state(true);
                    id(button_left).execute();
                  } else if (current_value == 0x01) {
                    ESP_LOGI("buttons", "SELECT button pressed");
                    id(select_button).publish_state(true);
                    id(button_select).execute();
                  } else if (current_value == 0x19) {
                    ESP_LOGI("buttons", "RIGHT button pressed");
                    id(right_button).publish_state(true);
                    id(button_right).execute();
                  } else if (current_value == 0x58) {
                    ESP_LOGI("buttons", "MENU button pressed");
                    id(menu_button).publish_state(true);
                    id(button_menu).execute();
                  }
                }
                
                // Reset button state when released
                if (current_value == 0xFF) {
                  id(left_button).publish_state(false);
                  id(select_button).publish_state(false);
                  id(right_button).publish_state(false);
                  id(menu_button).publish_state(false);
                }
                
                last_button_value = current_value;
              }
            }
          }