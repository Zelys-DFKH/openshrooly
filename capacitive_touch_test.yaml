# Capacitive Touch Button Test - ESP32-S3 Native Touch Sensing
esphome:
  name: capacitive-touch-test
  friendly_name: Capacitive Touch Button Test
  project:
    name: "test.capacitive-touch"
    version: "1.0.0"

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: recommended

logger:
  level: DEBUG

wifi:
  ap:
    ssid: "Capacitive-Touch-Test"
    password: "shrooly123"

i2c:
  sda: GPIO36
  scl: GPIO35
  scan: true
  id: bus_a
  frequency: 100khz

spi:
  clk_pin: GPIO7
  mosi_pin: GPIO6

font:
  - file: fonts/arial.ttf
    id: font_medium
    size: 10
  - file: fonts/arial.ttf
    id: font_small
    size: 8

display:
  - platform: waveshare_epaper
    id: my_display
    cs_pin: GPIO8
    dc_pin: GPIO48
    busy_pin: GPIO38
    reset_pin: GPIO21
    rotation: 90¬∞
    model: 2.90inv2-r2
    update_interval: never
    lambda: |-
      it.print(5, 5, id(font_medium), "CAPACITIVE TOUCH TEST");
      it.print(5, 20, id(font_small), "ESP32-S3 Native Touch Sensing");
      
      // Show touch sensor readings
      it.printf(5, 35, id(font_small), "Touch1 (GPIO1): %d", (int)id(touch1_sensor).state);
      it.printf(5, 50, id(font_small), "Touch2 (GPIO2): %d", (int)id(touch2_sensor).state);
      it.printf(5, 65, id(font_small), "Touch3 (GPIO3): %d", (int)id(touch3_sensor).state);
      it.printf(5, 80, id(font_small), "Touch4 (GPIO4): %d", (int)id(touch4_sensor).state);
      
      it.printf(5, 95, id(font_small), "Touch events: %d", id(touch_count));
      
      if (id(touch_detected)) {
        it.print(5, 110, id(font_small), "TOUCH BUTTONS FOUND!");
      } else {
        it.print(5, 110, id(font_small), "Touch pads or conductive areas");
      }

globals:
  - id: touch_count
    type: int
    restore_value: false
    initial_value: '0'
  - id: touch_detected
    type: bool
    restore_value: false
    initial_value: 'false'

# ESP32-S3 Touch Sensors (T1-T14 available on GPIO1-14)
esp32_touch:
  sleep_duration: 27306us
  measurement_duration: 8192us
  low_voltage_reference: 0.5V
  high_voltage_reference: 2.7V
  voltage_attenuation: 0V

binary_sensor:
  # Test touch sensors on multiple pins
  - platform: esp32_touch
    name: "Touch Button 1"
    id: touch1_button
    pin: GPIO1
    threshold: 1000
    on_press:
      - lambda: |-
          id(touch_count)++;
          id(touch_detected) = true;
          ESP_LOGE("TOUCH", "‚úÖ TOUCH BUTTON 1 (GPIO1) activated!");
      - component.update: my_display

  - platform: esp32_touch
    name: "Touch Button 2"
    id: touch2_button
    pin: GPIO2
    threshold: 1000
    on_press:
      - lambda: |-
          id(touch_count)++;
          id(touch_detected) = true;
          ESP_LOGE("TOUCH", "‚úÖ TOUCH BUTTON 2 (GPIO2) activated!");
      - component.update: my_display

  - platform: esp32_touch
    name: "Touch Button 3"
    id: touch3_button
    pin: GPIO3
    threshold: 1000
    on_press:
      - lambda: |-
          id(touch_count)++;
          id(touch_detected) = true;
          ESP_LOGE("TOUCH", "‚úÖ TOUCH BUTTON 3 (GPIO3) activated!");
      - component.update: my_display

  - platform: esp32_touch
    name: "Touch Button 4"
    id: touch4_button
    pin: GPIO4
    threshold: 1000
    on_press:
      - lambda: |-
          id(touch_count)++;
          id(touch_detected) = true;
          ESP_LOGE("TOUCH", "‚úÖ TOUCH BUTTON 4 (GPIO4) activated!");
      - component.update: my_display

  # Additional touch pins for comprehensive testing
  - platform: esp32_touch
    name: "Touch Button 5"
    id: touch5_button
    pin: GPIO6
    threshold: 1000
    on_press:
      - lambda: |-
          id(touch_count)++;
          id(touch_detected) = true;
          ESP_LOGE("TOUCH", "‚úÖ TOUCH BUTTON 5 (GPIO6) activated!");
      - component.update: my_display

  - platform: esp32_touch
    name: "Touch Button 6"
    id: touch6_button
    pin: GPIO7
    threshold: 1000
    on_press:
      - lambda: |-
          id(touch_count)++;
          id(touch_detected) = true;
          ESP_LOGE("TOUCH", "‚úÖ TOUCH BUTTON 6 (GPIO7) activated!");
      - component.update: my_display

  # Test GPIO5 reference
  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: true
    name: "Reference_GPIO5"
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_press:
      - logger.log: "üü¢ REFERENCE: GPIO5 works"

# Touch sensors for reading raw values
sensor:
  - platform: esp32_touch
    name: "Touch Raw 1"
    id: touch1_sensor
    pin: GPIO1
    update_interval: 500ms

  - platform: esp32_touch
    name: "Touch Raw 2"
    id: touch2_sensor
    pin: GPIO2
    update_interval: 500ms

  - platform: esp32_touch
    name: "Touch Raw 3"
    id: touch3_sensor
    pin: GPIO3
    update_interval: 500ms

  - platform: esp32_touch
    name: "Touch Raw 4"
    id: touch4_sensor
    pin: GPIO4
    update_interval: 500ms

interval:
  - interval: 2s
    then:
      - logger.log: "üîç Capacitive Touch Test - Touch conductive areas/buttons"
      - component.update: my_display