esphome:
  name: shrooly
  friendly_name: shrooly

  project:
    name: grahamsz.openshrooly
    version: 0.0.0-dev
  platformio_options:
    platform: espressif32@6.6.0

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: 3.1.3

logger:

# Public build: no API encryption or OTA password
api:
  reboot_timeout: 0s

ota:
  - platform: esphome

# First-run: start as hotspot; user configures Wi-Fi via captive portal
wifi:
  ap:
    ssid: "OpenShrooly"     # no password for easiest onboarding; add later if desired
captive_portal:

web_server:
  port: 80
  version: 3

# I2C bus configuration
# Used for SHT41 sensor, MCP7940N RTC, and humidifier control (also probably water level sensor)
i2c:
  sda: GPIO36
  scl: GPIO35
  scan: true
  id: bus_a


output:
  # White LED strip (PWM-brightness control on GPIO39)
  - platform: ledc
    pin: GPIO39
    id: white_led_pwm
    inverted: true

  # Air exchange fan (PWM-speed control on GPIO37)
  - platform: ledc
    pin: GPIO37
    id: fan_pwm
    inverted: true

# Create two light entities
light:
  - platform: monochromatic
    output: white_led_pwm
    name: "White LED Strip"

  - platform: esp32_rmt_led_strip
    id: rgb_led_strip
    name: "RGB WLED Strip"
    pin: GPIO42
    num_leds: 16
    chipset: ws2812
    rgb_order: RGB
    effects:
      - random:
      - strobe:
      - flicker:
      - addressable_rainbow:
      - addressable_scan:
      - addressable_twinkle:

# Humidifier control via I2C commands
switch:
  - platform: template
    name: "Humidifier Fan"
    id: humidifier_fan
    optimistic: true  # Assume the switch state is always correct, because there doesn't seem to be I2C feedback
    turn_on_action:
      - lambda: |-
          uint8_t data[2] = {0x00, 0x01};
          bool ok = id(bus_a).write(0x6C, data, 2);
          ESP_LOGI("humidifier", "TURN ON: sent [0x00,0x01] to 0x6C, ok=%d", ok);
    turn_off_action:
      - lambda: |-
          uint8_t data[2] = {0x00, 0x00};
          bool ok = id(bus_a).write(0x6C, data, 2);
          ESP_LOGI("humidifier", "TURN OFF: sent [0x00,0x00] to 0x6C, ok=%d", ok);

# Air exchange fan control via PWM output
fan:
  - platform: speed
    output: fan_pwm
    name: "Air Exchange Fan"

sensor:
  - platform: sht4x
    i2c_id: bus_a
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"
    update_interval: 30s

  - platform: pulse_counter
    pin: GPIO14
    name: "Air Exchange Fan Speed"
    id: fan_tach
    unit_of_measurement: "RPM"
    accuracy_decimals: 0
    filters:
      - multiply: 0.5 #This seems to scale consistently with the displayed values in the Shrooly self-test
    update_interval: 1s


time:
  - platform: ds1307
    i2c_id: bus_a
    address: 0x6F     # MCP7940N default IÂ²C address
    id: mcp7940n_time
    timezone: "UTC"

esp32_touch:

