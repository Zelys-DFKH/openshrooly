# Direct Control OpenShrooly - No WiFi Setup Required
substitutions:
  device_name: openshrooly
  friendly_name: Direct Control OpenShrooly

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  project:
    name: "direct.control-openshrooly"
    version: "3.0.0-direct"
  name_add_mac_suffix: true
  on_boot:
    priority: 200
    then:
      - lambda: |-
          id(selected_program_index) = 0;
          id(program_running) = false;
          id(running_program_index) = -1;
          // Get MAC address for display
          uint8_t mac[6];
          WiFi.macAddress(mac);
          id(mac_suffix) = str_sprintf("%02X%02X", mac[4], mac[5]);
      - delay: 2s
      - component.update: epd_display

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino
    version: recommended

logger:
  level: INFO

api:
  reboot_timeout: 0s

ota:
  - platform: esphome

# Direct AP mode - no configuration required  
wifi:
  ap:
    password: "shrooly123"
  domain: ".local"

# Simple web server without authentication
web_server:
  port: 80
  version: 1
  include_internal: true

# Working I2C configuration
i2c:
  sda: GPIO36
  scl: GPIO35
  scan: true
  id: bus_a
  frequency: 100khz

spi:
  clk_pin: GPIO7
  mosi_pin: GPIO6

display:
  - platform: waveshare_epaper
    cs_pin: GPIO8
    dc_pin: GPIO48
    busy_pin: GPIO38
    reset_pin: GPIO21
    model: 2.90inv2-r2
    rotation: 90°
    id: epd_display
    update_interval: never
    lambda: |-
      // Use full screen width (296x128 for this display)
      std::string wifi_name = "OpenShrooly-" + id(mac_suffix);
      
      it.print(5, 5, id(font_large), "DIRECT CONTROL OPENSHROOLY");
      it.printf(5, 20, id(font_small), "WiFi: %s", wifi_name.c_str());
      it.print(5, 35, id(font_small), "IP: 192.168.4.1");
      
      it.line(0, 45, 295, 45);
      
      // Large sensor readings on left, program on right
      if (!isnan(id(temperature).state) && !isnan(id(humidity).state)) {
        it.printf(5, 55, id(font_large), "TEMP: %.1f°C", id(temperature).state);
        it.printf(5, 75, id(font_large), "HUMIDITY: %.1f%%", id(humidity).state);
      } else {
        it.print(5, 55, id(font_medium), "Sensors initializing...");
      }
      
      // Large program name on right side
      std::vector<std::string> programs = {"GT PINNING", "GT FRUITING", "OYSTER", "REISHI"};
      if (id(program_running)) {
        if (id(running_program_index) >= 0 && id(running_program_index) < 4) {
          it.print(150, 55, id(font_medium), "RUNNING:");
          it.printf(150, 70, id(font_large), "%s", programs[id(running_program_index)].c_str());
        }
      } else {
        // Show selected program when idle
        if (id(selected_program_index) >= 0 && id(selected_program_index) < 4) {
          it.print(150, 55, id(font_medium), "READY:");
          it.printf(150, 70, id(font_large), "%s", programs[id(selected_program_index)].c_str());
        }
      }

font:
  - file: fonts/arial.ttf
    id: font_large
    size: 14
  - file: fonts/arial.ttf
    id: font_medium
    size: 11
  - file: fonts/arial.ttf
    id: font_small
    size: 8

sensor:
  - platform: sht4x
    i2c_id: bus_a
    temperature:
      name: "Temperature"
      id: temperature
    humidity:
      name: "Humidity" 
      id: humidity
    address: 0x44
    update_interval: 10s

binary_sensor:
  - platform: status
    name: "WiFi Connected"
    id: wifi_connected

globals:
  - id: selected_program_index
    type: int
    restore_value: true
    initial_value: '0'
  - id: running_program_index
    type: int
    restore_value: false
    initial_value: '-1'
  - id: program_running
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: mac_suffix
    type: std::string
    restore_value: false
    initial_value: '""'

# Hardware outputs
output:
  - platform: ledc
    pin: GPIO15  # White LED
    id: white_led_output
    frequency: 25000 Hz
  - platform: gpio
    pin: GPIO16  # Humidifier
    id: humidifier_output
  - platform: ledc
    pin: GPIO17  # Fan
    id: fan_output
    frequency: 25000 Hz
  - platform: ledc
    pin: GPIO18  # Red LED
    id: red_output
    frequency: 25000 Hz
  - platform: ledc
    pin: GPIO19  # Green LED
    id: green_output
    frequency: 25000 Hz
  - platform: ledc
    pin: GPIO20  # Blue LED
    id: blue_output
    frequency: 25000 Hz

fan:
  - platform: speed
    name: "Circulation Fan"
    id: circulation_fan
    output: fan_output

switch:
  - platform: output
    name: "Humidifier"
    id: humidifier
    output: humidifier_output

light:
  - platform: monochromatic
    name: "White LEDs"
    id: white_leds
    output: white_led_output
  - platform: rgb
    name: "RGB LEDs"
    id: rgb_leds
    red: red_output
    green: green_output
    blue: blue_output

# Direct program control buttons for web interface
button:
  - platform: template
    name: "Test Fan 100%"
    on_press:
      - fan.turn_on:
          id: circulation_fan
          speed: 100
      - logger.log: "Testing fan at maximum speed"

  - platform: template
    name: "Test Fan Off"
    on_press:
      - fan.turn_off: circulation_fan
      - logger.log: "Fan turned off"
  - platform: template
    name: "🍄 Start Golden Teacher Pinning"
    on_press:
      - if:
          condition:
            lambda: return !id(program_running);
          then:
            - lambda: id(selected_program_index) = 0;
            - script.execute: start_selected_program

  - platform: template
    name: "🍄 Start Golden Teacher Fruiting"
    on_press:
      - if:
          condition:
            lambda: return !id(program_running);
          then:
            - lambda: id(selected_program_index) = 1;
            - script.execute: start_selected_program

  - platform: template
    name: "🍄 Start Oyster Mushroom"
    on_press:
      - if:
          condition:
            lambda: return !id(program_running);
          then:
            - lambda: id(selected_program_index) = 2;
            - script.execute: start_selected_program

  - platform: template
    name: "🍄 Start Reishi Mushroom"
    on_press:
      - if:
          condition:
            lambda: return !id(program_running);
          then:
            - lambda: id(selected_program_index) = 3;
            - script.execute: start_selected_program

  - platform: template
    name: "⏹️ Stop Current Program"
    on_press:
      - if:
          condition:
            lambda: return id(program_running);
          then:
            - script.execute: stop_program

  - platform: template
    name: "⬅️ Previous Program"
    on_press:
      - if:
          condition:
            lambda: return !id(program_running);
          then:
            - lambda: |-
                id(selected_program_index) = (id(selected_program_index) - 1 + 4) % 4;
            - component.update: epd_display

  - platform: template
    name: "➡️ Next Program"
    on_press:
      - if:
          condition:
            lambda: return !id(program_running);
          then:
            - lambda: |-
                id(selected_program_index) = (id(selected_program_index) + 1) % 4;
            - component.update: epd_display

script:
  - id: start_selected_program
    then:
      - lambda: |-
          id(running_program_index) = id(selected_program_index);
          id(program_running) = true;
      - logger.log: "🚀 Starting selected mushroom program via web"
      - if:
          condition:
            lambda: return id(selected_program_index) == 0;  # GT Pinning
          then:
            - light.turn_on:
                id: white_leds
                brightness: 70%
            - light.turn_on:
                id: rgb_leds
                brightness: 80%
                red: 0%
                green: 0%
                blue: 100%
            - switch.turn_on: humidifier
            - fan.turn_on:
                id: circulation_fan
                speed: 60
      - if:
          condition:
            lambda: return id(selected_program_index) == 1;  # GT Fruiting
          then:
            - light.turn_on:
                id: white_leds
                brightness: 100%
            - light.turn_on:
                id: rgb_leds
                brightness: 60%
                red: 0%
                green: 0%
                blue: 100%
            - switch.turn_on: humidifier
            - fan.turn_on:
                id: circulation_fan
                speed: 40
      - if:
          condition:
            lambda: return id(selected_program_index) == 2;  # Oyster
          then:
            - light.turn_on:
                id: white_leds
                brightness: 80%
            - light.turn_on:
                id: rgb_leds
                brightness: 50%
                red: 100%
                green: 50%
                blue: 0%
            - switch.turn_on: humidifier
            - fan.turn_on:
                id: circulation_fan
                speed: 70
      - if:
          condition:
            lambda: return id(selected_program_index) == 3;  # Reishi
          then:
            - light.turn_on:
                id: white_leds
                brightness: 60%
            - light.turn_on:
                id: rgb_leds
                brightness: 70%
                red: 100%
                green: 0%
                blue: 0%
            - switch.turn_on: humidifier
            - fan.turn_on:
                id: circulation_fan
                speed: 30
      - component.update: epd_display

  - id: stop_program
    then:
      - lambda: |-
          id(program_running) = false;
          id(running_program_index) = -1;
      - logger.log: "⏹️ Stopping mushroom program via web"
      - light.turn_off: white_leds
      - light.turn_off: rgb_leds
      - switch.turn_off: humidifier
      - fan.turn_off: circulation_fan
      - component.update: epd_display

interval:
  - interval: 10s
    then:
      - component.update: epd_display