# Analog Button Detector - Detect buttons via voltage changes on ADC pins
esphome:
  name: analog-button-detector
  friendly_name: Analog Button Detector
  project:
    name: "detector.analog-buttons"
    version: "1.0.0"

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: recommended

logger:
  level: INFO

wifi:
  ap:
    ssid: "Analog-Button-Detector"
    password: "shrooly123"

spi:
  clk_pin: GPIO7
  mosi_pin: GPIO6

font:
  - file: fonts/arial.ttf
    id: font_medium
    size: 10

display:
  - platform: waveshare_epaper
    id: my_display
    cs_pin: GPIO8
    dc_pin: GPIO48
    busy_pin: GPIO38
    reset_pin: GPIO21
    rotation: 90¬∞
    model: 2.90inv2-r2
    update_interval: never
    lambda: |-
      it.print(5, 5, id(font_medium), "ANALOG BUTTON DETECTOR");
      it.print(5, 20, id(font_medium), "Monitoring voltage changes...");
      
      // Show current ADC readings
      it.printf(5, 35, id(font_medium), "GPIO1: %.3fV", id(gpio1_voltage).state);
      it.printf(5, 50, id(font_medium), "GPIO2: %.3fV", id(gpio2_voltage).state);  
      it.printf(5, 65, id(font_medium), "GPIO4: %.3fV", id(gpio4_voltage).state);
      it.printf(5, 80, id(font_medium), "GPIO3: %.3fV", id(gpio3_voltage).state);
      
      it.printf(5, 95, id(font_medium), "Voltage changes: %d", id(voltage_changes));
      it.print(5, 110, id(font_medium), "Press buttons to test");

globals:
  - id: voltage_changes
    type: int
    restore_value: false
    initial_value: '0'

# Monitor multiple ADC pins for voltage changes indicating button presses
sensor:
  - platform: adc
    pin: GPIO1
    name: "GPIO1 Voltage"
    id: gpio1_voltage
    update_interval: 250ms
    accuracy_decimals: 3
    attenuation: 12db
    on_value_range:
      - above: 0.5
        below: 3.0
        then:
          - lambda: |-
              id(voltage_changes)++;
              ESP_LOGE("ANALOG", "üéØ GPIO1 BUTTON: %.3fV", x);
          - component.update: my_display

  - platform: adc
    pin: GPIO2
    name: "GPIO2 Voltage"
    id: gpio2_voltage
    update_interval: 250ms
    accuracy_decimals: 3
    attenuation: 12db
    on_value_range:
      - above: 0.5
        below: 3.0
        then:
          - lambda: |-
              id(voltage_changes)++;
              ESP_LOGE("ANALOG", "üéØ GPIO2 BUTTON: %.3fV", x);
          - component.update: my_display

  - platform: adc
    pin: GPIO4
    name: "GPIO4 Voltage"
    id: gpio4_voltage
    update_interval: 250ms
    accuracy_decimals: 3
    attenuation: 12db
    on_value_range:
      - above: 0.5
        below: 3.0
        then:
          - lambda: |-
              id(voltage_changes)++;
              ESP_LOGE("ANALOG", "üéØ GPIO4 BUTTON: %.3fV", x);
          - component.update: my_display

  - platform: adc
    pin: GPIO3
    name: "GPIO3 Voltage"
    id: gpio3_voltage
    update_interval: 250ms
    accuracy_decimals: 3
    attenuation: 12db
    on_value_range:
      - above: 0.1
        below: 3.0
        then:
          - lambda: |-
              id(voltage_changes)++;
              ESP_LOGE("ANALOG", "üéØ GPIO3 BUTTON: %.3fV", x);
          - component.update: my_display

# Also test GPIO5 since we know it worked before
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: true
    name: "GPIO5 Reference"
    filters:
      - delayed_on: 100ms
    on_press:
      - lambda: |-
          ESP_LOGE("DIGITAL", "üü¢ GPIO5 DIGITAL BUTTON confirmed working");
          id(voltage_changes)++;
      - component.update: my_display

interval:
  - interval: 5s
    then:
      - component.update: my_display
      - logger.log: "üîç Analog detector - monitoring for button voltage changes"