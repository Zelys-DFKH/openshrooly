# External ADC Button Test - ADS1115 with Resistor Ladders
esphome:
  name: external-adc-button-test
  friendly_name: External ADC Button Test
  project:
    name: "test.external-adc-buttons"
    version: "1.0.0"

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: recommended

logger:
  level: DEBUG

wifi:
  ap:
    ssid: "External-ADC-Button-Test"
    password: "shrooly123"

i2c:
  sda: GPIO36
  scl: GPIO35
  scan: true
  id: bus_a
  frequency: 100khz

spi:
  clk_pin: GPIO7
  mosi_pin: GPIO6

font:
  - file: fonts/arial.ttf
    id: font_medium
    size: 10
  - file: fonts/arial.ttf
    id: font_small
    size: 8

display:
  - platform: waveshare_epaper
    id: my_display
    cs_pin: GPIO8
    dc_pin: GPIO48
    busy_pin: GPIO38
    reset_pin: GPIO21
    rotation: 90¬∞
    model: 2.90inv2-r2
    update_interval: never
    lambda: |-
      it.print(5, 5, id(font_medium), "EXTERNAL ADC BUTTON TEST");
      it.print(5, 20, id(font_small), "ADS1115 I2C ADC with resistor ladders");
      
      // Show ADC readings
      if (!isnan(id(ads_channel_0).state)) {
        it.printf(5, 35, id(font_small), "ADS Ch0: %.3fV", id(ads_channel_0).state);
      }
      if (!isnan(id(ads_channel_1).state)) {
        it.printf(5, 50, id(font_small), "ADS Ch1: %.3fV", id(ads_channel_1).state);
      }
      if (!isnan(id(ads_channel_2).state)) {
        it.printf(5, 65, id(font_small), "ADS Ch2: %.3fV", id(ads_channel_2).state);
      }
      if (!isnan(id(ads_channel_3).state)) {
        it.printf(5, 80, id(font_small), "ADS Ch3: %.3fV", id(ads_channel_3).state);
      }
      
      it.printf(5, 95, id(font_small), "Button events: %d", id(adc_button_count));
      
      if (id(external_adc_detected)) {
        it.print(5, 110, id(font_small), "EXTERNAL ADC FOUND!");
      } else {
        it.print(5, 110, id(font_small), "Testing ADS1115 @ 0x48-0x4B");
      }

globals:
  - id: adc_button_count
    type: int
    restore_value: false
    initial_value: '0'
  - id: external_adc_detected
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: last_adc_values
    type: float[4]
    restore_value: false

# Test ADS1115 at multiple I2C addresses
ads1115:
  - address: 0x48  # Default address
    id: ads1115_48
    i2c_id: bus_a
    continuous_mode: true
  - address: 0x49  # Alternative address 1
    id: ads1115_49
    i2c_id: bus_a
    continuous_mode: true
  - address: 0x4A  # Alternative address 2
    id: ads1115_4a
    i2c_id: bus_a
    continuous_mode: true
  - address: 0x4B  # Alternative address 3
    id: ads1115_4b
    i2c_id: bus_a
    continuous_mode: true

sensor:
  # ADS1115 at 0x48 - Test all 4 channels
  - platform: ads1115
    ads1115_id: ads1115_48
    name: "ADS Ch0 (0x48)"
    id: ads_channel_0
    pin: A0
    gain: 6.144
    update_interval: 100ms
    accuracy_decimals: 3
    on_value:
      - lambda: |-
          float current = x;
          float last = id(last_adc_values)[0];
          if (abs(current - last) > 0.05) {  // 50mV change threshold
            id(adc_button_count)++;
            id(last_adc_values)[0] = current;
            id(external_adc_detected) = true;
            ESP_LOGE("EXT_ADC", "‚úÖ ADS1115 Ch0 BUTTON: %.3fV (was %.3fV)", current, last);
          }
      - component.update: my_display

  - platform: ads1115
    ads1115_id: ads1115_48
    name: "ADS Ch1 (0x48)"
    id: ads_channel_1
    pin: A1
    gain: 6.144
    update_interval: 100ms
    accuracy_decimals: 3
    on_value:
      - lambda: |-
          float current = x;
          float last = id(last_adc_values)[1];
          if (abs(current - last) > 0.05) {
            id(adc_button_count)++;
            id(last_adc_values)[1] = current;
            id(external_adc_detected) = true;
            ESP_LOGE("EXT_ADC", "‚úÖ ADS1115 Ch1 BUTTON: %.3fV (was %.3fV)", current, last);
          }
      - component.update: my_display

  - platform: ads1115
    ads1115_id: ads1115_48
    name: "ADS Ch2 (0x48)"
    id: ads_channel_2
    pin: A2
    gain: 6.144
    update_interval: 100ms
    accuracy_decimals: 3
    on_value:
      - lambda: |-
          float current = x;
          float last = id(last_adc_values)[2];
          if (abs(current - last) > 0.05) {
            id(adc_button_count)++;
            id(last_adc_values)[2] = current;
            id(external_adc_detected) = true;
            ESP_LOGE("EXT_ADC", "‚úÖ ADS1115 Ch2 BUTTON: %.3fV (was %.3fV)", current, last);
          }
      - component.update: my_display

  - platform: ads1115
    ads1115_id: ads1115_48
    name: "ADS Ch3 (0x48)"
    id: ads_channel_3
    pin: A3
    gain: 6.144
    update_interval: 100ms
    accuracy_decimals: 3
    on_value:
      - lambda: |-
          float current = x;
          float last = id(last_adc_values)[3];
          if (abs(current - last) > 0.05) {
            id(adc_button_count)++;
            id(last_adc_values)[3] = current;
            id(external_adc_detected) = true;
            ESP_LOGE("EXT_ADC", "‚úÖ ADS1115 Ch3 BUTTON: %.3fV (was %.3fV)", current, last);
          }
      - component.update: my_display

  # Test alternative addresses as well
  - platform: ads1115
    ads1115_id: ads1115_49
    name: "ADS Alt Ch0 (0x49)"
    pin: A0
    gain: 6.144
    update_interval: 200ms
    accuracy_decimals: 3
    on_value:
      - lambda: |-
          if (!isnan(x)) {
            id(external_adc_detected) = true;
            ESP_LOGE("EXT_ADC", "‚úÖ ADS1115 @ 0x49 Ch0: %.3fV", x);
          }

binary_sensor:
  # Test GPIO5 reference
  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: true
    name: "Reference_GPIO5"
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_press:
      - logger.log: "üü¢ REFERENCE: GPIO5 works"

interval:
  - interval: 3s
    then:
      - logger.log: "üîç External ADC Test - Press buttons connected to ADS1115"
      - component.update: my_display