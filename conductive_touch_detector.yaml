# Conductive Touch Button Detector - ESP32-S3 Touch Sensing
esphome:
  name: conductive-touch-detector
  friendly_name: Conductive Touch Detector
  project:
    name: "detector.conductive-touch"
    version: "1.0.0"

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino
    version: recommended

logger:
  level: DEBUG

api:

ota:
  - platform: esphome

wifi:
  ap:
    ssid: "Conductive-Touch-Detector"
    password: "shrooly123"

i2c:
  sda: GPIO36
  scl: GPIO35
  scan: true
  id: bus_a
  frequency: 100khz

spi:
  clk_pin: GPIO7
  mosi_pin: GPIO6

font:
  - file: fonts/arial.ttf
    id: font_medium
    size: 10
  - file: fonts/arial.ttf
    id: font_small
    size: 8

display:
  - platform: waveshare_epaper
    id: my_display
    cs_pin: GPIO8
    dc_pin: GPIO48
    busy_pin: GPIO38
    reset_pin: GPIO21
    rotation: 90°
    model: 2.90inv2-r2
    update_interval: never
    lambda: |-
      it.print(5, 5, id(font_medium), "CONDUCTIVE TOUCH DETECTOR");
      it.print(5, 20, id(font_small), "ESP32-S3 Touch Pin Scanning");
      
      // Show raw touch values for all pins
      int y = 35;
      it.printf(5, y, id(font_small), "Touch1 (GPIO1): %d", (int)id(touch1_raw));
      y += 10;
      it.printf(5, y, id(font_small), "Touch2 (GPIO2): %d", (int)id(touch2_raw));
      y += 10;
      it.printf(5, y, id(font_small), "Touch3 (GPIO3): %d", (int)id(touch3_raw));
      y += 10;
      it.printf(5, y, id(font_small), "Touch4 (GPIO4): %d", (int)id(touch4_raw));
      y += 10;
      it.printf(5, y, id(font_small), "Touch10 (GPIO10): %d", (int)id(touch10_raw));
      y += 10;
      it.printf(5, y, id(font_small), "Touch11 (GPIO11): %d", (int)id(touch11_raw));
      
      if (id(touch_detected_count) > 0) {
        it.printf(5, 110, id(font_small), "TOUCH DETECTED: %d events", id(touch_detected_count));
      } else {
        it.print(5, 110, id(font_small), "Touch conductive button areas");
      }

globals:
  - id: touch_detected_count
    type: int
    restore_value: false
    initial_value: '0'
  - id: touch1_raw
    type: float
    restore_value: false
    initial_value: '0'
  - id: touch2_raw
    type: float
    restore_value: false
    initial_value: '0'
  - id: touch3_raw
    type: float
    restore_value: false
    initial_value: '0'
  - id: touch4_raw
    type: float
    restore_value: false
    initial_value: '0'
  - id: touch10_raw
    type: float
    restore_value: false
    initial_value: '0'
  - id: touch11_raw
    type: float
    restore_value: false
    initial_value: '0'

# Manual touch sensing using Arduino touch APIs
sensor:
  - platform: template
    name: "Touch Pin Scanner"
    update_interval: 200ms
    lambda: |-
      // ESP32-S3 touch-capable GPIO pins: 1-14
      // Read raw touch values using Arduino touchRead() function
      
      uint16_t touch1 = touchRead(1);   // GPIO1
      uint16_t touch2 = touchRead(2);   // GPIO2  
      uint16_t touch3 = touchRead(3);   // GPIO3
      uint16_t touch4 = touchRead(4);   // GPIO4
      uint16_t touch10 = touchRead(10); // GPIO10
      uint16_t touch11 = touchRead(11); // GPIO11
      uint16_t touch12 = touchRead(12); // GPIO12
      uint16_t touch13 = touchRead(13); // GPIO13
      uint16_t touch14 = touchRead(14); // GPIO14
      
      // Store values for display
      id(touch1_raw) = touch1;
      id(touch2_raw) = touch2;
      id(touch3_raw) = touch3;
      id(touch4_raw) = touch4;
      id(touch10_raw) = touch10;
      id(touch11_raw) = touch11;
      
      // Detect touch events (lower values = touch detected)
      // Baseline values are typically 40-100, touch brings them down to 5-20
      bool touch_detected = false;
      
      if (touch1 < 30) {
        ESP_LOGE("TOUCH", "✅ BUTTON 1 TOUCHED on GPIO1: %d", touch1);
        touch_detected = true;
      }
      if (touch2 < 30) {
        ESP_LOGE("TOUCH", "✅ BUTTON 2 TOUCHED on GPIO2: %d", touch2);
        touch_detected = true;
      }
      if (touch3 < 30) {
        ESP_LOGE("TOUCH", "✅ BUTTON 3 TOUCHED on GPIO3: %d", touch3);
        touch_detected = true;
      }
      if (touch4 < 30) {
        ESP_LOGE("TOUCH", "✅ BUTTON 4 TOUCHED on GPIO4: %d", touch4);
        touch_detected = true;
      }
      if (touch10 < 30) {
        ESP_LOGE("TOUCH", "✅ BUTTON 10 TOUCHED on GPIO10: %d", touch10);
        touch_detected = true;
      }
      if (touch11 < 30) {
        ESP_LOGE("TOUCH", "✅ BUTTON 11 TOUCHED on GPIO11: %d", touch11);
        touch_detected = true;
      }
      if (touch12 < 30) {
        ESP_LOGE("TOUCH", "✅ BUTTON 12 TOUCHED on GPIO12: %d", touch12);
        touch_detected = true;
      }
      if (touch13 < 30) {
        ESP_LOGE("TOUCH", "✅ BUTTON 13 TOUCHED on GPIO13: %d", touch13);
        touch_detected = true;
      }
      if (touch14 < 30) {
        ESP_LOGE("TOUCH", "✅ BUTTON 14 TOUCHED on GPIO14: %d", touch14);
        touch_detected = true;
      }
      
      if (touch_detected) {
        id(touch_detected_count)++;
      }
      
      return id(touch_detected_count);
    on_value:
      - component.update: my_display

# Test direct touch pins using ESPHome method (if available)
binary_sensor:
  # Try different threshold values for touch detection
  - platform: template
    name: "Touch GPIO1 Direct"
    lambda: |-
      return touchRead(1) < 25;  // Very sensitive threshold
    filters:
      - delayed_on: 100ms
      - delayed_off: 200ms
    on_press:
      - lambda: |-
          id(touch_detected_count)++;
          ESP_LOGE("DIRECT_TOUCH", "🟢 GPIO1 DIRECT TOUCH: %d", touchRead(1));
      - component.update: my_display

  - platform: template
    name: "Touch GPIO2 Direct"
    lambda: |-
      return touchRead(2) < 25;
    filters:
      - delayed_on: 100ms
      - delayed_off: 200ms
    on_press:
      - lambda: |-
          id(touch_detected_count)++;
          ESP_LOGE("DIRECT_TOUCH", "🟢 GPIO2 DIRECT TOUCH: %d", touchRead(2));
      - component.update: my_display

  - platform: template
    name: "Touch GPIO3 Direct"
    lambda: |-
      return touchRead(3) < 25;
    filters:
      - delayed_on: 100ms
      - delayed_off: 200ms
    on_press:
      - lambda: |-
          id(touch_detected_count)++;
          ESP_LOGE("DIRECT_TOUCH", "🟢 GPIO3 DIRECT TOUCH: %d", touchRead(3));
      - component.update: my_display

  - platform: template
    name: "Touch GPIO4 Direct"
    lambda: |-
      return touchRead(4) < 25;
    filters:
      - delayed_on: 100ms
      - delayed_off: 200ms
    on_press:
      - lambda: |-
          id(touch_detected_count)++;
          ESP_LOGE("DIRECT_TOUCH", "🟢 GPIO4 DIRECT TOUCH: %d", touchRead(4));
      - component.update: my_display

  # Test GPIO5 reference button  
  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: true
    name: "GPIO5 Reference"
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_press:
      - logger.log: "🟢 REFERENCE: GPIO5 physical button works"

interval:
  - interval: 3s
    then:
      - logger.log: "🔍 Conductive Touch Test - Touch conductive button areas"
      - component.update: my_display