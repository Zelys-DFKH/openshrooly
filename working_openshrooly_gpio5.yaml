# Working Enhanced OpenShrooly - Using only confirmed GPIO5 button
esphome:
  name: enhanced-openshrooly-gpio5
  friendly_name: Enhanced OpenShrooly GPIO5
  project:
    name: "enhanced.openshrooly-gpio5"
    version: "2.4.0-gpio5-only"
  on_boot:
    priority: 200
    then:
      - lambda: |-
          id(menu_mode) = 0;
          id(program_running) = false;
          id(running_program_index) = -1;
          id(selected_program_index) = 0;
      - delay: 2s
      - component.update: epd_display

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: recommended

logger:
  level: INFO

api:

ota:
  - platform: esphome

wifi:
  ap:
    ssid: "Enhanced-OpenShrooly-GPIO5"
    password: "shrooly123"
  reboot_timeout: 15min

captive_portal:
web_server:
  port: 80

# Working I2C configuration
i2c:
  sda: GPIO36
  scl: GPIO35
  scan: true
  id: bus_a
  frequency: 100khz

spi:
  clk_pin: GPIO7
  mosi_pin: GPIO6

display:
  - platform: waveshare_epaper
    cs_pin: GPIO8
    dc_pin: GPIO48
    busy_pin: GPIO38
    reset_pin: GPIO21
    model: 2.90inv2-r2
    rotation: 90¬∞
    id: epd_display
    update_interval: never
    lambda: |-
      if (id(menu_mode) == 0) {
        // Main program selection menu
        it.print(5, 5, id(font_large), "ENHANCED OPENSHROOLY");
        it.print(5, 20, id(font_small), "GPIO5 Single Button Version");
        
        // Sensor readings
        if (!isnan(id(temperature).state) && !isnan(id(humidity).state)) {
          it.printf(5, 35, id(font_small), "T:%.1f¬∞C H:%.1f%%", id(temperature).state, id(humidity).state);
        } else {
          it.print(5, 35, id(font_small), "Sensor: Initializing...");
        }
        
        it.line(0, 45, 200, 45);
        it.print(5, 50, id(font_medium), "SELECT PROGRAM:");
        
        std::vector<std::string> programs = {
          "Golden Teacher Pinning",
          "Golden Teacher Fruiting", 
          "Oyster Mushroom",
          "Reishi Mushroom"
        };
        
        for (int i = 0; i < 4; i++) {
          if (i == id(selected_program_index)) {
            it.printf(5, 65 + (i * 10), id(font_small), "> %s", programs[i].c_str());
          } else {
            it.printf(15, 65 + (i * 10), id(font_small), "%s", programs[i].c_str());
          }
        }
        
        it.line(0, 105, 200, 105);
        it.print(5, 110, id(font_small), "GPIO5: CYCLE/SELECT/START/STOP");
        
      } else if (id(menu_mode) == 1 && id(program_running)) {
        // Program running display
        std::vector<std::string> programs = {"GT Pinning", "GT Fruiting", "Oyster", "Reishi"};
        if (id(running_program_index) >= 0 && id(running_program_index) < 4) {
          it.printf(5, 5, id(font_large), "%s", programs[id(running_program_index)].c_str());
        }
        
        it.print(5, 25, id(font_medium), "STATUS: RUNNING");
        it.printf(5, 45, id(font_medium), "Temperature: %.1f¬∞C", id(temperature).state);
        it.printf(5, 60, id(font_medium), "Humidity: %.1f%%", id(humidity).state);
        
        // Equipment status
        it.print(5, 80, id(font_small), "LEDs: ON  Humidifier: ON  Fan: ON");
        
        it.line(0, 105, 200, 105);
        it.print(5, 110, id(font_small), "GPIO5: Press to STOP program");
        
      } else {
        // Fallback to main menu
        id(menu_mode) = 0;
      }

font:
  - file: fonts/arial.ttf
    id: font_large
    size: 14
  - file: fonts/arial.ttf
    id: font_medium
    size: 11
  - file: fonts/arial.ttf
    id: font_small
    size: 8

sensor:
  - platform: sht4x
    i2c_id: bus_a
    temperature:
      name: "Temperature"
      id: temperature
    humidity:
      name: "Humidity" 
      id: humidity
    address: 0x44
    update_interval: 10s

binary_sensor:
  - platform: status
    name: "WiFi Connected"
    id: wifi_connected

  # Single GPIO5 button with multiple functions
  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: true
    name: "Main Control Button"
    id: main_button
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_press:
      - logger.log: "üü¢ GPIO5 MAIN BUTTON PRESSED!"
      - script.execute: handle_button_press

globals:
  - id: menu_mode
    type: int
    restore_value: false
    initial_value: '0'  # 0 = program selection, 1 = program running
  - id: selected_program_index
    type: int
    restore_value: true
    initial_value: '0'
  - id: running_program_index
    type: int
    restore_value: false
    initial_value: '-1'
  - id: program_running
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: button_press_count
    type: int
    restore_value: false
    initial_value: '0'

# Hardware outputs
output:
  - platform: ledc
    pin: GPIO15  # White LED
    id: white_led_output
    frequency: 25000 Hz
  - platform: gpio
    pin: GPIO16  # Humidifier
    id: humidifier_output
  - platform: ledc
    pin: GPIO17  # Fan
    id: fan_output
    frequency: 25000 Hz
  - platform: ledc
    pin: GPIO18  # Red LED
    id: red_output
  - platform: ledc
    pin: GPIO19  # Green LED
    id: green_output
  - platform: ledc
    pin: GPIO20  # Blue LED
    id: blue_output

fan:
  - platform: speed
    name: "Circulation Fan"
    id: circulation_fan
    output: fan_output

switch:
  - platform: output
    name: "Humidifier"
    id: humidifier
    output: humidifier_output

light:
  - platform: monochromatic
    name: "White LEDs"
    id: white_leds
    output: white_led_output
  - platform: rgb
    name: "RGB LEDs"
    id: rgb_leds
    red: red_output
    green: green_output
    blue: blue_output

script:
  # Single button logic: cycle programs, start selected, stop running
  - id: handle_button_press
    then:
      - lambda: id(button_press_count)++;
      - if:
          condition:
            lambda: return id(program_running);
          then:
            # Stop running program
            - script.execute: stop_program
      - if:
          condition:
            lambda: return !id(program_running) && id(menu_mode) == 0;
          then:
            # In menu mode: check for double press to start program
            - delay: 300ms  # Wait for potential second press
            - if:
                condition:
                  lambda: return id(button_press_count) >= 2;
                then:
                  # Double press: start selected program
                  - script.execute: start_selected_program
                  - lambda: id(button_press_count) = 0;
                else:
                  # Single press: cycle through programs
                  - lambda: |-
                      id(selected_program_index) = (id(selected_program_index) + 1) % 4;
                      id(button_press_count) = 0;
                  - component.update: epd_display

  - id: start_selected_program
    then:
      - lambda: |-
          id(running_program_index) = id(selected_program_index);
          id(program_running) = true;
          id(menu_mode) = 1;
      - logger.log: "üöÄ Starting selected mushroom program"
      - if:
          condition:
            lambda: return id(selected_program_index) == 0;  # GT Pinning
          then:
            - light.turn_on:
                id: white_leds
                brightness: 70%
            - light.turn_on:
                id: rgb_leds
                brightness: 80%
                red: 0%
                green: 0%
                blue: 100%
            - switch.turn_on: humidifier
            - fan.turn_on:
                id: circulation_fan
                speed: 60
      - if:
          condition:
            lambda: return id(selected_program_index) == 1;  # GT Fruiting
          then:
            - light.turn_on:
                id: white_leds
                brightness: 100%
            - light.turn_on:
                id: rgb_leds
                brightness: 60%
                red: 0%
                green: 0%
                blue: 100%
            - switch.turn_on: humidifier
            - fan.turn_on:
                id: circulation_fan
                speed: 40
      - component.update: epd_display

  - id: stop_program
    then:
      - lambda: |-
          id(program_running) = false;
          id(running_program_index) = -1;
          id(menu_mode) = 0;
      - logger.log: "‚èπÔ∏è Stopping mushroom program"
      - light.turn_off: white_leds
      - light.turn_off: rgb_leds
      - switch.turn_off: humidifier
      - fan.turn_off: circulation_fan
      - component.update: epd_display