# Enhanced OpenShrooly with On-Device Program Editing
# Full menu system using 4-button navigation and e-ink display

esphome:
  name: enhanced-openshrooly
  friendly_name: Enhanced OpenShrooly
  project:
    name: "enhanced.openshrooly"
    version: "2.0.0"

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

logger:
  level: INFO

api:
  encryption:
    key: "your-api-key-here"

ota:
  - platform: esphome
    password: "your-ota-password"

wifi:
  ssid: "YourWiFiSSID"
  password: "YourWiFiPassword"
  ap:
    ssid: "Enhanced-OpenShrooly"
    password: "openshrooly"

captive_portal:
web_server:
  port: 80

i2c:
  sda: 8
  scl: 9
  scan: true

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

# E-Paper Display with menu system
display:
  - platform: waveshare_epaper
    cs_pin: 5
    dc_pin: 17
    busy_pin: 4
    reset_pin: 16
    model: 2.13in-ttgo-b73
    rotation: 270°
    id: epd_display
    update_interval: never  # Manual updates for better responsiveness
    lambda: |-
      // Menu system display logic
      if (id(menu_mode) == 0) {
        // Main program selection menu
        it.print(0, 0, id(font_large), "SELECT PROGRAM");
        
        std::vector<std::string> programs = {
          "Golden Teacher Pin",
          "Golden Teacher Fruit", 
          "Oyster Mushroom",
          "Reishi Mushroom"
        };
        
        for (int i = 0; i < 4; i++) {
          if (i == id(selected_program_index)) {
            it.printf(0, 25 + (i * 15), id(font_medium), "> %s", programs[i].c_str());
          } else {
            it.printf(10, 25 + (i * 15), id(font_medium), "%s", programs[i].c_str());
          }
        }
        
        it.print(0, 100, id(font_small), "◄► Navigate  ●Select  ■Settings");
        
      } else if (id(menu_mode) == 1) {
        // Settings menu for selected program
        it.printf(0, 0, id(font_large), "SETTINGS");
        
        std::vector<std::string> programs = {"GT Pin", "GT Fruit", "Oyster", "Reishi"};
        it.printf(0, 20, id(font_medium), "%s Program", programs[id(selected_program_index)].c_str());
        
        std::vector<std::string> settings = {
          "White LED %",
          "Blue LED %", 
          "Humidity %",
          "Fan Speed %",
          "Photoperiod H"
        };
        
        for (int i = 0; i < 5; i++) {
          if (i == id(selected_setting_index)) {
            float value = 0;
            if (id(selected_program_index) == 0) { // GT Pinning
              float values[] = {id(gt_pin_white), id(gt_pin_blue), id(gt_pin_humidity), id(gt_pin_fan), id(gt_pin_photoperiod)};
              value = values[i];
            } else if (id(selected_program_index) == 1) { // GT Fruiting
              float values[] = {id(gt_fruit_white), id(gt_fruit_blue), id(gt_fruit_humidity), id(gt_fruit_fan), id(gt_fruit_photoperiod)};
              value = values[i];
            }
            it.printf(0, 40 + (i * 12), id(font_medium), "> %s: %.0f", settings[i].c_str(), value);
          } else {
            float value = 0;
            if (id(selected_program_index) == 0) {
              float values[] = {id(gt_pin_white), id(gt_pin_blue), id(gt_pin_humidity), id(gt_pin_fan), id(gt_pin_photoperiod)};
              value = values[i];
            } else if (id(selected_program_index) == 1) {
              float values[] = {id(gt_fruit_white), id(gt_fruit_blue), id(gt_fruit_humidity), id(gt_fruit_fan), id(gt_fruit_photoperiod)};
              value = values[i];
            }
            it.printf(10, 40 + (i * 12), id(font_medium), "%s: %.0f", settings[i].c_str(), value);
          }
        }
        
        it.print(0, 110, id(font_small), "◄► Nav ●Edit ■Back ▲Start");
        
      } else if (id(menu_mode) == 2) {
        // Edit mode for specific setting
        it.print(0, 0, id(font_large), "EDIT SETTING");
        
        std::vector<std::string> settings = {"White LED %", "Blue LED %", "Humidity %", "Fan Speed %", "Photoperiod H"};
        it.printf(0, 25, id(font_medium), "%s", settings[id(selected_setting_index)].c_str());
        
        float current_value = 0;
        if (id(selected_program_index) == 0) {
          float values[] = {id(gt_pin_white), id(gt_pin_blue), id(gt_pin_humidity), id(gt_pin_fan), id(gt_pin_photoperiod)};
          current_value = values[id(selected_setting_index)];
        } else if (id(selected_program_index) == 1) {
          float values[] = {id(gt_fruit_white), id(gt_fruit_blue), id(gt_fruit_humidity), id(gt_fruit_fan), id(gt_fruit_photoperiod)};
          current_value = values[id(selected_setting_index)];
        }
        
        it.printf(0, 50, id(font_large), ">>> %.0f <<<", current_value);
        
        // Show range hints
        if (id(selected_setting_index) == 0 || id(selected_setting_index) == 1) {
          it.print(0, 75, id(font_small), "Range: 0-100%");
        } else if (id(selected_setting_index) == 2) {
          it.print(0, 75, id(font_small), "Range: 70-95%");
        } else if (id(selected_setting_index) == 3) {
          it.print(0, 75, id(font_small), "Range: 0-100%");
        } else if (id(selected_setting_index) == 4) {
          it.print(0, 75, id(font_small), "Range: 8-16 hours");
        }
        
        it.print(0, 90, id(font_small), "◄► Adjust ●Save ■Cancel");
        
      } else if (id(menu_mode) == 3) {
        // Program running display
        std::vector<std::string> programs = {"GT Pinning", "GT Fruiting", "Oyster", "Reishi"};
        it.printf(0, 0, id(font_large), "%s", programs[id(running_program_index)].c_str());
        
        it.print(0, 25, id(font_medium), "RUNNING...");
        
        // Show current environment
        it.printf(0, 50, id(font_medium), "Temp: %.1f°C", id(temperature).state);
        it.printf(0, 65, id(font_medium), "Humidity: %.1f%%", id(humidity).state);
        
        // Show current settings being used
        if (id(running_program_index) == 0) {
          it.printf(0, 85, id(font_small), "White: %.0f%% Blue: %.0f%%", id(gt_pin_white), id(gt_pin_blue));
          it.printf(0, 98, id(font_small), "Target RH: %.0f%% Fan: %.0f%%", id(gt_pin_humidity), id(gt_pin_fan));
        } else if (id(running_program_index) == 1) {
          it.printf(0, 85, id(font_small), "White: %.0f%% Blue: %.0f%%", id(gt_fruit_white), id(gt_fruit_blue));
          it.printf(0, 98, id(font_small), "Target RH: %.0f%% Fan: %.0f%%", id(gt_fruit_humidity), id(gt_fruit_fan));
        }
        
        it.print(0, 115, id(font_small), "■ Stop Program");
      }

font:
  - file: "fonts/arial.ttf"
    id: font_large
    size: 14
  - file: "fonts/arial.ttf" 
    id: font_medium
    size: 11
  - file: "fonts/arial.ttf"
    id: font_small
    size: 8

sensor:
  - platform: sht3xd
    temperature:
      name: "Temperature"
      id: temperature
    humidity:
      name: "Humidity"
      id: humidity
    address: 0x44
    update_interval: 10s

  - platform: pulse_counter
    pin: 12
    name: "Fan Speed"
    id: fan_speed
    unit_of_measurement: 'RPM'

# Global variables for menu system
globals:
  # Menu navigation
  - id: menu_mode
    type: int
    restore_value: false
    initial_value: '0'  # 0=main, 1=settings, 2=edit, 3=running
    
  - id: selected_program_index
    type: int
    restore_value: true  # Remember last selected program
    initial_value: '0'
    
  - id: selected_setting_index
    type: int
    restore_value: false
    initial_value: '0'
    
  - id: running_program_index
    type: int
    restore_value: false
    initial_value: '-1'
    
  - id: program_running
    type: bool
    restore_value: false
    initial_value: 'false'

  # Golden Teacher Pinning settings (editable)
  - id: gt_pin_white
    type: float
    restore_value: true
    initial_value: '70.0'
  - id: gt_pin_blue  
    type: float
    restore_value: true
    initial_value: '80.0'
  - id: gt_pin_humidity
    type: float
    restore_value: true
    initial_value: '95.0'
  - id: gt_pin_fan
    type: float
    restore_value: true
    initial_value: '60.0'
  - id: gt_pin_photoperiod
    type: float
    restore_value: true
    initial_value: '12.0'

  # Golden Teacher Fruiting settings (editable)
  - id: gt_fruit_white
    type: float
    restore_value: true
    initial_value: '100.0'
  - id: gt_fruit_blue
    type: float
    restore_value: true
    initial_value: '60.0'
  - id: gt_fruit_humidity
    type: float
    restore_value: true
    initial_value: '87.0'
  - id: gt_fruit_fan
    type: float
    restore_value: true
    initial_value: '40.0'
  - id: gt_fruit_photoperiod
    type: float
    restore_value: true
    initial_value: '12.0'

# 4-Button navigation system
binary_sensor:
  - platform: gpio
    pin:
      number: 0
      mode: INPUT_PULLUP
      inverted: true
    name: "Left Button"
    id: left_button
    on_press:
      - script.execute: button_left

  - platform: gpio
    pin:
      number: 35
      mode: INPUT_PULLUP  
      inverted: true
    name: "Select Button"
    id: select_button
    on_press:
      - script.execute: button_select

  - platform: gpio
    pin:
      number: 32
      mode: INPUT_PULLUP
      inverted: true
    name: "Right Button" 
    id: right_button
    on_press:
      - script.execute: button_right

  - platform: gpio
    pin:
      number: 33
      mode: INPUT_PULLUP
      inverted: true
    name: "Menu Button"
    id: menu_button
    on_press:
      - script.execute: button_menu

# Hardware outputs
output:
  - platform: ledc
    pin: 25
    id: fan_output
    frequency: 25000 Hz
  - platform: gpio
    pin: 26
    id: humidifier_output
  - platform: ledc
    pin: 27
    id: white_led_output
  - platform: ledc
    pin: 14
    id: red_output
  - platform: ledc
    pin: 13
    id: green_output
  - platform: ledc
    pin: 12
    id: blue_output

fan:
  - platform: speed
    name: "Circulation Fan"
    id: circulation_fan
    output: fan_output

switch:
  - platform: output
    name: "Humidifier"
    id: humidifier
    output: humidifier_output

light:
  - platform: monochromatic
    name: "White LEDs"
    id: white_leds
    output: white_led_output
  - platform: rgb
    name: "RGB LEDs" 
    id: rgb_leds
    red: red_output
    green: green_output
    blue: blue_output

# Button handling scripts
script:
  - id: button_left
    then:
      - if:
          condition:
            lambda: return id(menu_mode) == 0;  # Main menu
          then:
            - lambda: |-
                id(selected_program_index) = (id(selected_program_index) + 3) % 4;
            - component.update: epd_display
      - if:
          condition:
            lambda: return id(menu_mode) == 1;  # Settings menu
          then:
            - lambda: |-
                id(selected_setting_index) = (id(selected_setting_index) + 4) % 5;
            - component.update: epd_display
      - if:
          condition:
            lambda: return id(menu_mode) == 2;  # Edit mode
          then:
            - script.execute: decrease_setting

  - id: button_right
    then:
      - if:
          condition:
            lambda: return id(menu_mode) == 0;  # Main menu
          then:
            - lambda: |-
                id(selected_program_index) = (id(selected_program_index) + 1) % 4;
            - component.update: epd_display
      - if:
          condition:
            lambda: return id(menu_mode) == 1;  # Settings menu
          then:
            - lambda: |-
                id(selected_setting_index) = (id(selected_setting_index) + 1) % 5;
            - component.update: epd_display
      - if:
          condition:
            lambda: return id(menu_mode) == 2;  # Edit mode
          then:
            - script.execute: increase_setting

  - id: button_select
    then:
      - if:
          condition:
            lambda: return id(menu_mode) == 0;  # Main menu - start program
          then:
            - script.execute: start_selected_program
      - if:
          condition:
            lambda: return id(menu_mode) == 1;  # Settings menu - enter edit mode
          then:
            - lambda: |-
                id(menu_mode) = 2;
            - component.update: epd_display
      - if:
          condition:
            lambda: return id(menu_mode) == 2;  # Edit mode - save setting
          then:
            - lambda: |-
                id(menu_mode) = 1;
            - component.update: epd_display
      - if:
          condition:
            lambda: return id(menu_mode) == 3;  # Running - stop program
          then:
            - script.execute: stop_program

  - id: button_menu
    then:
      - if:
          condition:
            lambda: return id(menu_mode) == 0;  # Main menu - enter settings
          then:
            - lambda: |-
                id(menu_mode) = 1;
                id(selected_setting_index) = 0;
            - component.update: epd_display
      - if:
          condition:
            lambda: return id(menu_mode) == 1;  # Settings menu - back to main
          then:
            - lambda: |-
                id(menu_mode) = 0;
            - component.update: epd_display
      - if:
          condition:
            lambda: return id(menu_mode) == 2;  # Edit mode - cancel
          then:
            - lambda: |-
                id(menu_mode) = 1;
            - component.update: epd_display
      - if:
          condition:
            lambda: return id(program_running);  # Any mode while running - stop
          then:
            - script.execute: stop_program

  # Setting adjustment scripts
  - id: increase_setting
    then:
      - lambda: |-
          float* setting_ptr = nullptr;
          float increment = 1.0;
          float max_val = 100.0;
          
          if (id(selected_program_index) == 0) { // GT Pinning
            float* settings[] = {&id(gt_pin_white), &id(gt_pin_blue), &id(gt_pin_humidity), &id(gt_pin_fan), &id(gt_pin_photoperiod)};
            setting_ptr = settings[id(selected_setting_index)];
          } else if (id(selected_program_index) == 1) { // GT Fruiting
            float* settings[] = {&id(gt_fruit_white), &id(gt_fruit_blue), &id(gt_fruit_humidity), &id(gt_fruit_fan), &id(gt_fruit_photoperiod)};
            setting_ptr = settings[id(selected_setting_index)];
          }
          
          if (setting_ptr != nullptr) {
            if (id(selected_setting_index) == 2) { // Humidity
              increment = 1.0; max_val = 95.0;
            } else if (id(selected_setting_index) == 4) { // Photoperiod
              increment = 0.5; max_val = 16.0;
            }
            
            *setting_ptr = min(*setting_ptr + increment, max_val);
          }
      - component.update: epd_display

  - id: decrease_setting
    then:
      - lambda: |-
          float* setting_ptr = nullptr;
          float decrement = 1.0;
          float min_val = 0.0;
          
          if (id(selected_program_index) == 0) { // GT Pinning
            float* settings[] = {&id(gt_pin_white), &id(gt_pin_blue), &id(gt_pin_humidity), &id(gt_pin_fan), &id(gt_pin_photoperiod)};
            setting_ptr = settings[id(selected_setting_index)];
          } else if (id(selected_program_index) == 1) { // GT Fruiting
            float* settings[] = {&id(gt_fruit_white), &id(gt_fruit_blue), &id(gt_fruit_humidity), &id(gt_fruit_fan), &id(gt_fruit_photoperiod)};
            setting_ptr = settings[id(selected_setting_index)];
          }
          
          if (setting_ptr != nullptr) {
            if (id(selected_setting_index) == 2) { // Humidity
              decrement = 1.0; min_val = 70.0;
            } else if (id(selected_setting_index) == 4) { // Photoperiod
              decrement = 0.5; min_val = 8.0;
            }
            
            *setting_ptr = max(*setting_ptr - decrement, min_val);
          }
      - component.update: epd_display

  # Program execution
  - id: start_selected_program
    then:
      - lambda: |-
          id(running_program_index) = id(selected_program_index);
          id(program_running) = true;
          id(menu_mode) = 3;
      - if:
          condition:
            lambda: return id(selected_program_index) == 0;  # GT Pinning
          then:
            - light.turn_on:
                id: white_leds
                brightness: !lambda return id(gt_pin_white) / 100.0;
            - light.turn_on:
                id: rgb_leds
                brightness: !lambda return id(gt_pin_blue) / 100.0;
                red: 0%
                green: 0%
                blue: 100%
            - switch.turn_on: humidifier
            - fan.turn_on:
                id: circulation_fan
                speed: !lambda return id(gt_pin_fan) / 100.0;
      - if:
          condition:
            lambda: return id(selected_program_index) == 1;  # GT Fruiting
          then:
            - light.turn_on:
                id: white_leds
                brightness: !lambda return id(gt_fruit_white) / 100.0;
            - light.turn_on:
                id: rgb_leds
                brightness: !lambda return id(gt_fruit_blue) / 100.0;
                red: 0%
                green: 0%
                blue: 100%
            - switch.turn_on: humidifier
            - fan.turn_on:
                id: circulation_fan
                speed: !lambda return id(gt_fruit_fan) / 100.0;
      - component.update: epd_display

  - id: stop_program
    then:
      - lambda: |-
          id(program_running) = false;
          id(running_program_index) = -1;
          id(menu_mode) = 0;
      - light.turn_off: white_leds
      - light.turn_off: rgb_leds  
      - switch.turn_off: humidifier
      - fan.turn_off: circulation_fan
      - component.update: epd_display